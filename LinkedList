Linked List

#Definition

A linked list is a linear data structure, in which the elements are not stored at contiguous memory locations. The elements in a linked list are linked using pointers.

So, it is important to mention that a linked list is a linear data structure, so it is not stored together, or in a sequence. 
Each node in a linked list can before stored in a different address in the computer's memory. For this specific reason, we do use pointers in linked lists.

What are pointers? 

Pointers are variables in which stores an address. So, it is like pointing to a specific address of variable. 

As we have mentioned before, a linked list consists of nodes. What is a node? We can consider a node as a object which has two properties which are, 'value' and 'next'.

Value represents the value inside of the node, while the next represents the pointer which directs to the next node. 

To make it more comprehensive, we can visualize a node as an object as we have mentioned before and it has two properties which are, 'value' and 'next'. 
The Next property has a value which is the next next. So, next is considered to be a pointer which points to the address of the next node. 




In the Linked List section, I have learnt to perform numerous things in the linked list:

a) Creation of a node and Linked List

b) Appending a node

c) Prepending a node

d) Delete first and last node

e) Getting a specific node by its index

d) Setting a new value to a node

e) Inserting a new node at a specific index

f) Reversing a node



A linked list consists of three main parts which are a head, tail and length. 

Head is a pointer which points to the first node, and we can visualize it as an object that its next is equal to the first node. 

A tail is a pointer which points to the last node, and we can visualize it as an object that its next is equal to nullptr. 

Length defines how many nodes are in the Linked List.


Creation of Node and Linked List 


In the creation of a node class, it must has two properties as we have mentioned before. A next which has Node* as it's a pointer and a value which has an int data type.
We create an constructor in order to create numerous instances out of this class, Node. In the constructor, there is an argument which has a data type int to pass the int value. 
The node's value must be equal to this val, and we make the next ptr equals to nullptr. 

In the creation of a linked list class, it must has three main properties which are head, tail and length. 
In the creation of the first instance out of the node class, we pass a value which is passed from the instances of the LinkedList class. Then, we pass it to the Node instance.
In the first node of a linked list, we make the head and tail pointers equal (pointing to) the first node, owing to the fact that it is the only node in the linked list.


class Node {

// each instance will have two properties which are 

public: 
int value;
Node* next;

// create a constructor in order to create instances out of the Node class, we pass a val through the constructor

Node(int val) {
// we pass the val to the value property, and we set the ptr to be nullptr as this will be the first Node in the linked list
this->value = val;
next = nullptr;
}

}

class LinkedList {
// as we've mentioned before, a linked list consists of three part which are
private:
Node* head;
Node* tail;
int length;


public:
LinkedList(int val){
// we set both ptrs, head and tail, to the new node. In other words, the head and tail object both hold the newNode inside of them.
Node* newNode = new Node(val);
this-> head = newNode;
this-> tail = newNode;
length = 1;
}
}


Appending a Node in the Linked List

What does appending mean? It is adding a node, at which index? The last one, so we are going to set the ptr of the last node (tail) to the new node we have created.

void appened(int val){
Node* newNode = new Node(val);

if(length == 0) {
head = newNode;
tail = newNode;
} else {
tail.next = newNode;

// Now, in order to define the last node in the element, which is the new node, we have got to set it as a the new tail

tail = newNode;
}
length++;
}


Prepending a Node in the Linked List

What does a prepending mean? It is adding a node, at which index? The first one, so we are going to the next point of the new Node to the first node in the linked list.

void prepend(int val) {
Node* newNode = new Node(val);
if(length == 0) {
head = newNode;
tail = newNode;
} else {
newNode->next = head;
head = newNode;
}
length++;
}

Getting a Node in the Linked List by its index

Node* get(int index) {
Node* temp = head;

for(int i =0; i < length; i++){
temp = temp->next;
}
return temp;
}

Setting a new value by its index

bool set(int val, int index) {
*Node temp = get(index);

if(temp) {
temp->next = val;
return true;
}
return false;
}

Reversing the whole linked list and this, my peeps, is considered to be the hardest

}





