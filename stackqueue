I had this conversation with Zoma about OOP, and we were discussing about that some CS students do not know jack shit about OOP, which is so weird for me.
  He replied, "Yeah, it is". Then, he continued saying, "Let me tell you something, in our fresh year, we have never learnt something about built-in methods". 
  I was like, how? He replied, "In Java, there is a built-in methods for the stack class in order to pop and push elements. Right? We didn't know anything about them. 
  They'd taught us to develop these methods by ourselves, first" 
  
That, my people, was so mind-blowing. Yeah, I've learnt how to do bubble sorting and stuff like that without using the sort method. But, stacks' methods? 
  That has to be so fun to learn. Moreover, this is the reason why I recommend learning algorithms and data stuctures in C++. You develop stack methods by yourself, there 
  is no built-in methods.
  
  
  
  Stacks
  
  Stack is a linear data structure which follows a particular order in which the operations are performed. The order is LIFO.
  
  (geekforgeeks: https://www.geeksforgeeks.org/stack-data-structure/)
  
  Stack can be used in a lot of cool stuff, like browsers. Cool.
  
  
  #include <iostream>
#include <string>

class Node {
public:
	int value;
	Node* next;

	Node(int val) {
		this->value = val;
		next = nullptr;
	}
};

class Stack {
private:

	Node* top;
	int height;

public:
	Stack(int val) {

		Node* newNode = new Node(val);
		top = newNode;
		height = 1;

	}

	void printStack() {
		Node* temp = top;

		while (temp) {
			std::cout << temp->value << std::endl;

			temp = temp->next;
		}
	}

	void push(int val) {
		Node* poppedNode = new Node(val);

		if (height == 0) poppedNode = top;
		poppedNode->next = top;
		top = poppedNode;
		height++;
	}

	int pop() {
	
	
	        // When you look at the reason behind making to pointers in here!
		// We created a temp pointer which is equal to top 
		// so we have to pointers top and temp pointing at the first node
		//we say that popped value that we want to remove is = top->value
		// then we move the top pointer to the next node
		// temp pointer is still pointing the first node
		// delete temp to remove that node


		if (height == 0) return INT_MIN;
		
		Node* temp = top;
		int poppedNodeValue = top->value;
		top = top->next;
		delete temp;
		height--;
		return poppedNodeValue;
	}
};

int main() {

	Stack* newStack = new Stack(4);

	newStack->push(10);

	newStack->pop();

	newStack->printStack();

	return 0;
}

// A question might hit your mind in the pop part. As we are using the linked list data structure as a stack. Moreover, we use the head of the linked list as
    the top of the stack in order to pop and push the stack, which makes sense. But, why? The answer is, Big O Notation. 
    
//  As we have mentioned before, removing and setting a new head to the linked list its Big O Notation is O(1) as the number of operations is constant whatever
    the number of nodes. In the other hand, the removal of the tail of the linked list is O(N) as we need to traverse through all nodes until reach to the 
    last node. 
    
   

