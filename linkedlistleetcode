203. Remove Linked List Elements

ELABORATION:

We have got a linked list, and we want to remove each and every node that its value is equal to the demanded value. Easy one. 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
    
    // We have got make sure that the first node in the linked list is not a nullptr
    // If it is, then there is nothing do in here, lol
    if(!head) return head;
    
    // We want to make sure we remove every node that is equal to the val.
    
    while(head && head->value == val){
    head = head->next;
    }
    
    // So, we have removed (skipped) every node that is equal to the val.
    // temp pointer now points at the first node (after the removal of other nodes)
    ListNode*  temp = head; 
    
    while(temp){
    if( temp-> next && temp->next->val == val){
    temp->next-> = temp->next->next;
    } else {
    temp = temp->next;
    }
    
    return head;
    }
    
    So, the leasson learnt from this LeetCode question is:
    
    We don't actually delete a node, we actually skip this node and set the head to the next node. Also, we need to make sure every time that the node is not a nullptr.
    This trick I always forget, lol. 
    
    }
    
    
    
    876. Middle of the Linked List
    
    I have used the two-pointer technique in order to puzzle out this problem. Actually, this algorithm can be used to get the middle element of any array. Nick White, thank you bro. 
    
    /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
    
    // two pointers 
    ListNode* first = head;
    ListNode* second = head;
    
    while(second && second-> next ){
    first = first-> next;
    second = second->next -> next;
    }
    
    return first;
    }
    
    This algorithm is so great in getting the middle element in any array, using the two-pointer technique (the nested loop techenique is bad, my peeps)
    
    We create two pointers which are first and second. As long as second isn't nullptr, nor the next node, we keep looping.
    
    As long as we loop through the linked list. The first pointer points to the next node, while the second pointer points to the next's next. 
    
    So, when the second pointer stops, the first pointer will be at the middle element. Try it out in a piece of paper to fully comprehend this algorithm.
    
    
    
    
    83. Remove Duplicates from Sorted List
    
    /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
   
  
   ListNode* temp = head;
   
   while(temp & temp -> next){
   // if the current node's value is equal to the next node's value, we remove the next node's value
   if(temp->val == temp->next->val){
   //delete the next value
   temp->next = temp->next->next;
   } else {
   //else traverse noramlly 
   temp = temp->next;
   }
   }
    
  }
